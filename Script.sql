------TABLESPACE FOR COURSEWORK------

/*CREATE TABLESPACE TS_COURSEWORK
DATAFILE 'D:\Oracle-db\CW\TS_COURSEWORK.DBF'
SIZE 20M
AUTOEXTEND ON NEXT 1M
MAXSIZE 1000M;*/

-------TEMPORARY TABLESPACE FOR COURSEWORK--------

--CREATE TEMPORARY TABLESPACE TS_COURSEWORK_TEMP
--TEMPFILE 'D:\Oracle-db\CW\TS_COURSEWORK_TEMP.DBF'
--SIZE 10M
--AUTOEXTEND ON NEXT 1M
--MAXSIZE 1000M;

----------ROLE FOR MANAGERS COURSEWORK---------

--alter session set "_ORACLE_SCRIPT"=true;
--CREATE ROLE RLMANAGERCORE;
--
----------PERMISSIONS FOR MANAGERS-----------
--
-- GRANT CREATE SESSION,
-- 	  CREATE TABLE,
-- 	  CREATE VIEW,
-- 	  CREATE PROCEDURE,
-- 	  CREATE TRIGGER TO RLMANAGERCORE;
--
-- GRANT SELECT,
--     INSERT,
--     DELETE,
--     UPDATE ON TICKETS TO RLMANAGERCORE;
--
-- GRANT SELECT,
--     INSERT,
--     DELETE,
--     UPDATE ON TRAINS TO RLMANAGERCORE;
--
-- GRANT SELECT,
--     INSERT,
--     DELETE,
--     UPDATE ON VANS TO RLMANAGERCORE;
--
-- GRANT SELECT,
--     INSERT,
--     DELETE,
--     UPDATE ON SCHEDULE TO RLMANAGERCORE;
--
-- GRANT SELECT,
--     INSERT,
--     DELETE,
--     UPDATE ON PASSENGERS TO RLMANAGERCORE;

-- GRANT ALL ON TICKETS TO RLMANAGERCORE;
-- GRANT ALL ON PAYMENTS TO RLMANAGERCORE;

--CREATE USER MANAGER
--IDENTIFIED BY MANAGER_PASS
--TEMPORARY TABLESPACE TS_COURSEWORK_TEMP
--DEFAULT TABLESPACE TS_COURSEWORK 
--QUOTA UNLIMITED ON TS_COURSEWORK
--ACCOUNT UNLOCK;

-- GRANT RLMANAGERCORE TO MANAGER;

ALTER SESSION SET "_oracle_script" = TRUE;

--------PROFILE FOR MANAGERS------
CREATE PROFILE PMANAGERCORE LIMIT
FAILED_LOGIN_ATTEMPTS 3
PASSWORD_LIFE_TIME UNLIMITED
PASSWORD_GRACE_TIME UNLIMITED
PASSWORD_LOCK_TIME UNLIMITED;

ALTER USER MANAGER PROFILE PMANAGERCORE;

--------ROLE FOR USERS-------------
-- alter session set "_ORACLE_SCRIPT"=true;
-- CREATE ROLE RLUSERCORE;

------PERMISSIONS FOR USERS---------

-- GRANT CREATE SESSION TO RLUSERCORE;
--
-- GRANT
--     SELECT,
--     INSERT,
--     UPDATE ON PASSENGERS TO RLUSERCORE;
--
-- GRANT
--     SELECT,
--     INSERT,
--     UPDATE ON TICKETS TO RLUSERCORE;
--
-- GRANT
--     SELECT ON SCHEDULE TO RLUSERCORE;

-- GRANT
--     SELECT,
--     INSERT ON PAYMENTS TO RLUSERCORE;

------CREATE USER FOR USERS-----------

-- CREATE USER USERS
-- IDENTIFIED BY USERS_PASS
-- TEMPORARY TABLESPACE TS_COURSEWORK_TEMP
-- DEFAULT TABLESPACE TS_COURSEWORK
-- QUOTA UNLIMITED ON TS_COURSEWORK
-- ACCOUNT UNLOCK;
--
-- GRANT RLUSERCORE TO USERS;

------PROFILE FOR USERS--------
CREATE PROFILE PUSERCORE LIMIT
FAILED_LOGIN_ATTEMPTS 5
PASSWORD_LIFE_TIME 90
PASSWORD_GRACE_TIME 7;

ALTER USER USERS PROFILE PUSERCORE;

--------CREATE TABLE SCHEDULE-------
-- DROP TABLE SCHEDULE;
-- CREATE TABLE SCHEDULE (
--     "ID" NUMBER(14,0) GENERATED ALWAYS AS IDENTITY  PRIMARY KEY,
--     ID_TRAIN NUMBER(14, 0),
--     "DATE" DATE,
--     ROUTE NUMBER(14,0),
--     FREQUENCY NUMBER(1) CHECK (FREQUENCY IN (1,2,3,4)),
--     CONSTRAINT NUMBER_OF_TRAIN_FK FOREIGN KEY (ID_TRAIN) REFERENCES TRAINS("ID"),
--     CONSTRAINT SROUTE_FK FOREIGN KEY (ROUTE) REFERENCES ROUTES("ID")
-- );

--------Procedure for Schedule---------
CREATE OR REPLACE VIEW TAKE_SCHEDULE AS
    SELECT SCHEDULE."ID", ID_TRAIN, TRAINS.CATEGORY_OF_TRAIN,
           ROUTES.DEPARTURE_POINT, ROUTES.ARRIVAL_POINT,
            ROUTES.DISTANCE, ROUTES.DURATION,
           "DATE", FREQUENCY, TRAINS.IS_FOR_PASSENGERS
    FROM SCHEDULE
        JOIN TRAINS ON SCHEDULE.ID_TRAIN = TRAINS.ID
        JOIN ROUTES ON SCHEDULE.ROUTE = ROUTES.ID;

-----------VARRAY FOR VANS-------------

-- DROP TYPE VANS_COMPOSITION;
-- CREATE OR REPLACE TYPE VANS_COMPOSITION AS VARRAY(75) OF NUMBER(14,0);

----------CREATE TABLE TRAINS----------

-- DROP TABLE TRAINS;
-- CREATE TABLE TRAINS (
--     "ID" NUMBER(14,0) GENERATED ALWAYS AS IDENTITY  PRIMARY KEY,
--     CATEGORY_OF_TRAIN NVARCHAR2(15),
--     IS_FOR_PASSENGERS CHAR(1) CHECK ( IS_FOR_PASSENGERS IN ('0','1')),
--     VANS VANS_COMPOSITION,
--     COUNT_OF_VANS NUMBER(2),
--     PARKING_TIME NUMBER(8,0)
-- );

----------Trigger for TRAINS--------------

CREATE OR REPLACE TRIGGER TRAINS_INSERT_UPDATE_TRIGGER
BEFORE INSERT OR UPDATE ON TRAINS
FOR EACH ROW
DECLARE
  vans_new VANS_COMPOSITION;
  vansfree NUMBER(1, 0);
BEGIN
  IF INSERTING THEN
    vans_new := :NEW.VANS;

    FOR I IN vans_new.FIRST .. vans_new.LAST LOOP
      SELECT IS_FREE INTO vansfree FROM VANS WHERE ID = vans_new(I);
      IF vansfree = 0 THEN
        vans_new := DELETE_ENTRY(vans_new, vans_new(I));
      ELSE
        UPDATE VANS SET IS_FREE = 0 WHERE ID = vans_new(I);
      END IF;
    END LOOP;

    :NEW.COUNT_OF_VANS := vans_new.COUNT;
    :NEW.VANS := vans_new;

  ELSIF UPDATING('VANS') THEN
    vans_new := :OLD.VANS;

    FOR I IN vans_new.FIRST .. vans_new.LAST LOOP
      SELECT IS_FREE INTO vansfree FROM VANS WHERE ID = vans_new(I);
      UPDATE VANS SET IS_FREE = 1 WHERE ID = vans_new(I);
    END LOOP;

    vans_new := :NEW.VANS;

    FOR I IN vans_new.FIRST .. vans_new.LAST LOOP
      SELECT IS_FREE INTO vansfree FROM VANS WHERE ID = vans_new(I);
      IF vansfree = 0 THEN
        vans_new := DELETE_ENTRY(vans_new, vans_new(I));
      ELSE
        UPDATE VANS SET IS_FREE = 0 WHERE ID = vans_new(I);
      END IF;
    END LOOP;

    :NEW.VANS := vans_new;
    :NEW.COUNT_OF_VANS := vans_new.COUNT;
  END IF;
END;

----------CREATE TABLE VANS-------------
-- CREATE GLOBAL TEMPORARY TABLE TEMP_VANS (
--     "ID" NUMBER(14,0) GENERATED ALWAYS AS IDENTITY  PRIMARY KEY,
--     "TYPE" NVARCHAR2(15),
--     "CAPACITY" NUMBER(4,0),
--     IS_FREE NUMBER(1,0) CHECK ( IS_FREE IN (0, 1) )
-- );
-- INSERT INTO TEMP_VANS(TYPE, CAPACITY) SELECT TYPE, CAPACITY FROM VANS;
-- SELECT * FROM TEMP_VANS;

-- DROP TABLE VANS;
-- DELETE FROM VANS;
-- CREATE TABLE VANS (
--     "ID" NUMBER(14,0) GENERATED ALWAYS AS IDENTITY  PRIMARY KEY,
--     "TYPE" NVARCHAR2(15),
--     "CAPACITY" NUMBER(4,0)
--     IS_FREE NUMBER(1,0) CHECK ( IS_FREE IN (0, 1) )
-- );

-- CREATE BITMAP INDEX bm_idx_vans_type on VANS(TYPE);

---------CREATE TABLE PASSENGERS-----------
-- ALTER TABLE PASSENGERS drop column FCS;
-- -- ALTER TABLE PASSENGERS ADD FULL_NAME NVARCHAR2(50);
-- Drop TABLE PASSENGERS;
-- CREATE GLOBAL TEMPORARY TABLE TEMP_PASSENGERS (
--     "ID" NUMBER(14,0) GENERATED ALWAYS AS IDENTITY  PRIMARY KEY,
--     FULL_NAME NVARCHAR2(50),
--    PASSPORT NVARCHAR2(9),
--    BENEFITS NUMBER(3,0) CHECK (BENEFITS < 101)
-- );
-- INSERT INTO PASSENGERS(FULL_NAME, PASSPORT, BENEFITS) SELECT FULL_NAME, PASSPORT, BENEFITS FROM TEMP_PASSENGERS;

-- CREATE TABLE PASSENGERS (
--   "ID" NUMBER(14,0) GENERATED ALWAYS AS IDENTITY  PRIMARY KEY,
--    FULL_NAME NVARCHAR2(50),
--    PASSPORT NVARCHAR2(9),
--    BENEFITS NUMBER(3,0) CHECK (BENEFITS < 101)
-- );
---------CREATE TABLE TICKET-------------
-- DROP TABLE TICKETS;
-- CREATE TABLE TICKETS (
--     "ID" NUMBER(14,0) GENERATED ALWAYS AS IDENTITY  PRIMARY KEY,
--     ID_PASSENGER NUMBER(14,0),
--     ID_TRAIN NUMBER(14,0),
--     ID_VAN NUMBER(14,0),
--     SEAT_NUMBER NUMBER(4,0),
--     FROM_WHERE NUMBER(14, 0),
--     TO_WHERE NUMBER(14, 0),
--     "DATE" DATE,
--     COST NUMBER(8,0),
--     CONSTRAINT ID_PASSENGER_FK FOREIGN KEY (ID_PASSENGER) REFERENCES PASSENGERS("ID"),
--     CONSTRAINT ID_TRAIN_FK FOREIGN KEY (ID_TRAIN) REFERENCES  TRAINS("ID"),
--     CONSTRAINT ID_VAN_FK FOREIGN KEY (ID_VAN) REFERENCES VANS("ID"),
--     CONSTRAINT FROM_WHERE_FK FOREIGN KEY (FROM_WHERE) REFERENCES STATIONS("ID"),
--     CONSTRAINT TO_WHERE_FK FOREIGN KEY (TO_WHERE) REFERENCES STATIONS("ID")
-- );

-- CREATE INDEX DATE_SORT_INDEX ON TICKETS("DATE");

----------TRIGGER FOR TICKETS--------
CREATE OR REPLACE TRIGGER increase_van_capacity
AFTER INSERT OR UPDATE ON TICKETS
BEGIN
  UPDATE_VANS_CAPACITY();
END;

--------trigger for PAYMENTS---------
CREATE OR REPLACE TRIGGER update_van_capacity
AFTER INSERT OR UPDATE ON PAYMENTS
FOR EACH ROW
WHEN (NEW.STATUS = 'S')
DECLARE
  VAN_CAPACITY NUMBER;
BEGIN
    -- Получаем вместимость вагона из таблицы VANS
    SELECT CAPACITY INTO VAN_CAPACITY
    FROM VANS
    WHERE ID = (SELECT ID_VAN FROM TICKETS WHERE ID = :NEW.ID_TICKET);

    -- Проверяем, достигнута ли максимальная вместимость вагона
    IF VAN_CAPACITY = 0 THEN
        RAISE_APPLICATION_ERROR(-20001, 'The capacity of the van is zero. Cannot insert a new row into the ticket table.');
    END IF;

    -- Уменьшаем значение столбца CAPACITY в таблице VANS
    UPDATE VANS
    SET CAPACITY = CAPACITY - 1
    WHERE ID = (SELECT ID_VAN FROM TICKETS WHERE ID = :NEW.ID_TICKET);
END;

--------CREATE TABLE FOR PAYMENTS----------

-- DROP TABLE PAYMENTS;
-- CREATE TABLE PAYMENTS (
--     "ID" NUMBER(14,0) GENERATED ALWAYS AS IDENTITY  PRIMARY KEY,
--     ID_TICKET NUMBER(14,0),
--     DATE_PAY DATE,
--     STATUS CHAR(1) CHECK ( STATUS IN ('S', 'R', 'W')),
--     CONSTRAINT ID_TICKET_FK FOREIGN KEY  (ID_TICKET) REFERENCES TICKETS("ID")
-- );

-- INSERT INTO MANAGER.TRAINS (ID, CATEGORY_OF_TRAIN, IS_FOR_PASSENGERS, VANS, PARKING_TIME, COUNT_OF_VANS) VALUES ('T1', 'PASS', '1', VANS_COMPOSITION(12121), 2, 0)

----------CREATE VARRAY FOR POINTS----------

--CREATE OR REPLACE TYPE VPOINTS AS VARRAY(20) OF NUMBER(14,0);

---------CREATE TABLE ROUTES---------------

-- DROP TABLE ROUTES;
-- CREATE TABLE ROUTES (
--     "ID" NUMBER(14,0) GENERATED ALWAYS AS IDENTITY  PRIMARY KEY,
--     DEPARTURE_POINT NUMBER(14,0) NOT NULL,
--     ARRIVAL_POINT NUMBER(14,0) NOT NULL,
--     DISTANCE NUMBER NOT NULL,
--     DURATION NUMBER NOT NULL,
--     CONSTRAINT DEPARTURE_POINT_FK FOREIGN KEY (DEPARTURE_POINT) REFERENCES STATIONS(ID),
--     CONSTRAINT ARRIVAL_POINT_FK FOREIGN KEY (ARRIVAL_POINT) REFERENCES STATIONS(ID)
-- );

------!!!!!!!! Устарело
-------CREATE TABLE FOR POINTS-------------

-- DROP TABLE POINTS;
-- CREATE TABLE POINTS (
--   "ID" NUMBER(14,0) PRIMARY KEY,
--   STOP_POINT NVARCHAR2(20)
-- );

-----------------------------------!!!!!!

-----------CREATE TABLE STATIONS-----------

-- DROP TABLE STATIONS;
-- CREATE TABLE STATIONS (
--     "ID" NUMBER(14,0) GENERATED ALWAYS AS IDENTITY  PRIMARY KEY,
--     STATION_NAME NVARCHAR2(30) NOT NULL,
--     CITY NVARCHAR2(30) NOT NULL,
--     STATE NVARCHAR2(30) NOT NULL,
--     COUNTRY NVARCHAR2(30) NOT NULL
-- );

---------CREATE TABLES STATIONS_ROUTES---------

-- DROP TABLE STATIONS_ROUTES;
-- CREATE TABLE STATIONS_ROUTES (
--     "ID" NUMBER(14,0) GENERATED ALWAYS AS IDENTITY  PRIMARY KEY,
--     ROUTE_ID NUMBER(14,0) NOT NULL,
--     STATION_ID NUMBER(14,0) NOT NULL,
--     STATION_ORDER NUMBER NOT NULL,
--     CONSTRAINT STATION_ID_FK FOREIGN KEY (STATION_ID) REFERENCES STATIONS(ID),
--     CONSTRAINT ROUTE_FK FOREIGN KEY (ROUTE_ID) REFERENCES ROUTES(ID)
-- );

--------PROCEDURES---------
CREATE OR REPLACE PROCEDURE UPDATE_VANS_CAPACITY
AS BEGIN
DECLARE
  CURSOR cur IS SELECT ID_VAN FROM TICKETS WHERE TICKETS."DATE" < SYSDATE;
  TYPE id_tab_type IS TABLE OF TICKETS.ID_VAN%TYPE INDEX BY PLS_INTEGER;
  id_tab id_tab_type;
BEGIN
  OPEN cur;
  LOOP
    FETCH cur BULK COLLECT INTO id_tab LIMIT 1000;
    EXIT WHEN id_tab.COUNT = 0;
    FORALL i IN 1..id_tab.COUNT
      UPDATE VANS SET CAPACITY = CAPACITY + 1
                    WHERE ID = id_tab(i);
  END LOOP;
  CLOSE cur;
END;
end;

-----------FUNCTIONS----------
CREATE OR REPLACE FUNCTION delete_entry(p_record IN VANS_COMPOSITION, p_val IN NUMBER)
RETURN VANS_COMPOSITION
IS
   v_ret  VANS_COMPOSITION := VANS_COMPOSITION();
BEGIN
   FOR n IN p_record.FIRST..p_record.LAST LOOP
      IF p_record(n) != p_val THEN
        v_ret.EXTEND;
        v_ret(v_ret.LAST) := p_record(n);
      END IF;
   END LOOP;
   RETURN v_ret;
END;


-----------TO JSON-------------
CREATE OR REPLACE DIRECTORY utl_dir AS 'D:\Oracle-db\CW\archive_data';
GRANT READ, WRITE ON DIRECTORY utl_dir TO public;
DECLARE
  output_file UTL_FILE.FILE_TYPE;
  json_data CLOB;
BEGIN
  SELECT JSON_OBJECT(
           'data' VALUE JSON_ARRAYAGG(
             JSON_OBJECT(
               'id' VALUE ID,
               'type' VALUE TYPE,
               'capacity' VALUE CAPACITY,
               'is_free' VALUE IS_FREE
             )
           )
         )
  INTO json_data
  FROM VANS WHERE ROWNUM < 10;

output_file := UTL_FILE.FOPEN('UTL_DIR', 'VANS.JSON', 'W');

UTL_FILE.PUT(output_file, json_data);

UTL_FILE.FCLOSE(output_file);
END;
